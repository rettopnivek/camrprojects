library( devtools )
library( roxygen2 )
devtools::document()
devtools::document()
devtools::document()
library(camrprojects)
folder_pathways <- list(
Project = getwd(),
Path_labels = list( Project = c( 'Project', 'project' ) )
)
lst <- list(
path = paste0( getwd(), '/R' ),
title = 'R',
labels = c( 'R', 'r' )
)
folder_pathways = create_folder_pathways( folder_pathways, add_path = lst )
folder_pathways
?create_folder_pathways
devtools::document()
library(camrprojects)
load_package( 'utilityf', from = 'Github' )
sem( rnorm(100) )
devtools::document()
library(camrprojects)
library( devtools )
library( roxygen2 )
devtools::document()
library(camrprojects)
.Platform
.Platform$OS.type
R.version
R.version$os
sessionInfo(
)
OS = sessionInfo()
OS$running
?mean
include
source('D:/CAM_postdoc/R_packages/camrprojects/R/S09-elements.R')
vec <- c( rep( 'Cat', 3 ), rep( 'Dog', 2 ), NA, rep( 'Frog', 4 ) )
elements( vec )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S09-elements.R')
elements( vec )
elements( vec, count = F )
elements( vec )
elements( vec, count = F )
vec <- c( rep( c( 'A', 'B', 'C', 'D' ), each = 3 ), NA )
elements( vec )
elements( vec, count = F )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S09-elements.R', echo=TRUE)
elements( vec, exclude = c( 'A', 'B' )
)
elements( vec, na.rm = F )
elements( vec, na.rm = F, count = F )
elements( vec, exclude = c( 'A', 'B' ) )
elements( vec, exclude = c( 'A', 'B' ), count = F )
elements( vec, exclude = c( 'A', 'B' ) )
elements( vec, na.rm = F, count = F )
elements( vec, na.rm = F )
?segments
elements( vec, exclude = c( 'A', 'B' ), count = F, na.rm = F )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S07-path_by_os.R', echo=TRUE)
accessed <- path_by_os(
Windows = 'C:/Users',
Mac = '',
Linux = ''
)
accessed <- path_by_os(
c( Windows = 'C:/Users',
Mac = '',
Linux = '' )
)
print( getwd() )
print( accessed )
setwd("C:/Users")
getwd()
OS$running
accessed <- path_by_os(
c( Windows = 'C:/Users',
Mac = '',
Linux = '' )
)
print( accessed )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S07-path_by_os.R', echo=TRUE)
accessed <- path_by_os(
c( Windows = 'C:/Users',
Mac = '',
Linux = '' )
)
getwd()
print( accessed )
print( accessed ); print( getwd() )
setwd("D:/CAM_postdoc/R_packages/camrprojects")
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( 0, 0, 1, 1, .25 )
linear_interp( 0, 0, 2, 1, .25 )
linear_interp( 0, 0, 2, 1, y = .25 )
x = c( 0, 1, 2 )
y = c( 0, 2, 4 )
x11(); plot( x, y )
x11(); plot( x, y, xlim = c( 0, 4 ), ylim = c( 0, 4 ), type = 'b' )
apply( cbind( x[-3], y[-3], x[-1], y[-1], c( .5, 1.5 ) ), 1, linear_interp )
apply( cbind( x[-3], y[-3], x[-1], y[-1], c( .5, 1.5 ) ), 1, function(x) linear_interp( x[1], x[2], x[3], x[4], x = x[5] ) )
apply( cbind( x[-3], y[-3], x[-1], y[-1], c( .5, 1.5 ) ), 1, function(x) linear_interp( x[1], x[2], x[3], x[4], y = x[5] ) )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( c( x0 = 0, y0 = 0, x1 = 1, y1 = 2, x = .5 ) )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( c( x0 = 0, y0 = 0, x1 = 1, y1 = 2, x = .5 ) )
linear_interp( c( x0 = 0, y0 = 0, x1 = 1, y1 = 2, y = .5 ), FALSE )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( c( x0 = 0, y0 = 0, x1 = 1, y1 = 2, y = .5 ), FALSE )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( c( x0 = 0, y0 = 0, x1 = 1, y1 = 2, y = .5 ), FALSE )
linear_interp( c( x0 = 0, y0 = 0, x1 = 1, y1 = 2, x = .5 ) )
linear_interp( c( x0 = 0, y0 = 0, x1 = 1, y1 = 2, y = .5 ), FALSE )
x = c( 0, 1, 2 )
y = c( 0, 2, 4 )
m = cbind( x[-3], y[-3], x[-1], y[-1], c( .5, 1.5 ) )
apply( m, 1, linear_interp )
m
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
apply( m, 1, linear_interp )
linear_interp( m[1,] )
m[1,]
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( m[1,] )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( m[1,] )
names( m[1,] )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( m[1,] )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( m[1,] )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
linear_interp( m[1,] )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
apply( m, 1, linear_interp )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S10-linear_interp.R', echo=TRUE)
apply( m, 1, linear_interp )
apply( m, 1, linear_interp, interp_y = F )
data( iris )
head( iris )
str( iris )
library( dplyr )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length > 1.3 ) )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S11-univariate_stat.R', echo=TRUE)
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length > 1.3 ) )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length <= 1.3 ) )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length <= 1.5 ) )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length <= 1.8 ) )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length <= 2 ) )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length <= 3 ) )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length <= 1.8 ), PL = univariate_stat( Petal.Length, f = mean ) )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length <= 1.8 ), PL = univariate_stat( Petal.Length, f = min ) )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length <= 2.9 ), PL = univariate_stat( Petal.Length, f = min ) )
iris %>% group_by( Species ) %>% summarise( SL = univariate_stat( Sepal.Length, f = mean, include = Petal.Length <= 3.5 ), PL = univariate_stat( Petal.Length, f = min ) )
?summarise
head( iris )
unique( iris$Petal.Width )
unique( iris$Sepal.Width )
sort( unique( iris$Sepal.Width ) )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S11-univariate_stat.R', echo=TRUE)
univariate_stat(
iris$Sepal.Length, f = mean, include = iris$Petal.Length < 3.5
)
spec
spec
sep_len <- iris$Sepal.Length
pet_len <- iris$Petal.Length
spec <- iris$Species
spc
sln <- iris$Sepal.Length
pln <- iris$Petal.Length
psc <- iris$Species
univariate_stat( sln )
univariate_stat( sln, f = mean )
univariate_stat( sln, f = function(x) round( mean(x), 2 ) )
univariate_stat( sln )
univariate_stat( sln, f = mean )
univariate_stat( sln, f = function(x) round( mean(x), 2 ) )
univariate_stat( sln, f = mean, include = pln < 3.5 )
spc <- iris$Species
spc
spc == 'versicolor'
univariate_stat(
sep_len[spc == 'versicolor'],
f = mean,
include = pet_len[spc == 'versicolor'] < 3.5
)
univariate_stat(
sep_len[spc == 'versicolor'],
f = mean,
include = pet_len[spc == 'versicolor'] < 3
)
univariate_stat(
sep_len[spc == 'versicolor'],
f = mean,
include = pet_len[spc == 'versicolor'] < 3,
default = 'Missing'
)
data( iris )
sln <- iris$Sepal.Length
pln <- iris$Petal.Length
spc <- iris$Species
f_x <- function(x) as.character( round( mean(x), 2 ) )
f_p <- function(x) paste0( round( 100*mean(x) ), '%' )
univariate_stat( sln )
univariate_stat( sln, f = mean )
univariate_stat( sln, f = f_x )
univariate_stat( sln, f = f_x, include = pln < 3.5 )
univariate_stat( sln, f = f_x, include = pln < 3.5 )
unique( spc )
?iris
# Load in base R data set
data( iris )
# Sepal length
sln <- iris$Sepal.Length
# Number of observations for sepal length
univariate_stat( sln )
# Mean sepal length
univariate_stat( sln, f = mean )
# Define custom function for formatted mean
f_x <- function(x) as.character( round( mean(x), 2 ) )
univariate_stat( sln, f = f_x )
# Petal length
pln <- iris$Petal.Length
# Conditional mean for sepal length when petal length < 3.5
univariate_stat( sln, f = f_x, include = pln < 3.5 )
# Species of iris
spc <- iris$Species
# Isolate species 'virginica'
vrg <- spc == 'virginica'
# No petal lengths less than 3.5 for virginica, so return default
univariate_stat( sln[vrg], f = f_x, include = pln[vrg] < 3.5, default = 'No obs' )
f_p <- function(x) paste0( round( 100*mean(x) ), '%' )
univariate_stat( spc == 'selosa', f = f_p )
unique( spc )
f_p <- function(x) paste0( round( 100*mean(x) ), '%' )
univariate_stat( spc == 'setosa', f = f_p )
univariate_stat( spc == 'setosa', f = f_p, exclude = 'virginica' )
univariate_stat( spc == 'setosa', f = f_p, exclude = 'virginica' )
univariate_stat( spc, f = function(x) length( unique(x) ), exclude = 'virginica' )
univariate_stat( spc, f = function(x) length( unique(x) ) )
univariate_stat( spc, exclude = 'virginica' )
univariate_stat( spc, f = f_p, exclude = 'virginica' )
univariate_stat( as.character( spc ), f = f_p, exclude = 'virginica' )
univariate_stat( spc == 'setosa', f = f_p, exclude = 'virginica' )
univariate_stat( spc == 'setosa', f = sum, exclude = 'virginica' )
univariate_stat( spc == 'setosa', f = f_p, exclude = 'virginica' )
# Compute percentage of species 'setosa'
f_p <- function(x) paste0( round( 100*mean(x == 'setosa') ), '%' )
univariate_stat( spc, f = f_p )
# Exclude 'virginica'
univariate_stat( spc, f = f_p, exclude = 'virginica' )
library( devtools )
devtools::document()
library(camrprojects)
devtools::document()
library(camrprojects)
