# Species of iris
spc <- iris$Species
# Isolate species 'virginica'
vrg <- spc == 'virginica'
# No petal lengths less than 3.5 for virginica, so return default
univariate_stat( sln[vrg], f = f_x, include = pln[vrg] < 3.5, default = 'No obs' )
f_p <- function(x) paste0( round( 100*mean(x) ), '%' )
univariate_stat( spc == 'selosa', f = f_p )
unique( spc )
f_p <- function(x) paste0( round( 100*mean(x) ), '%' )
univariate_stat( spc == 'setosa', f = f_p )
univariate_stat( spc == 'setosa', f = f_p, exclude = 'virginica' )
univariate_stat( spc == 'setosa', f = f_p, exclude = 'virginica' )
univariate_stat( spc, f = function(x) length( unique(x) ), exclude = 'virginica' )
univariate_stat( spc, f = function(x) length( unique(x) ) )
univariate_stat( spc, exclude = 'virginica' )
univariate_stat( spc, f = f_p, exclude = 'virginica' )
univariate_stat( as.character( spc ), f = f_p, exclude = 'virginica' )
univariate_stat( spc == 'setosa', f = f_p, exclude = 'virginica' )
univariate_stat( spc == 'setosa', f = sum, exclude = 'virginica' )
univariate_stat( spc == 'setosa', f = f_p, exclude = 'virginica' )
# Compute percentage of species 'setosa'
f_p <- function(x) paste0( round( 100*mean(x == 'setosa') ), '%' )
univariate_stat( spc, f = f_p )
# Exclude 'virginica'
univariate_stat( spc, f = f_p, exclude = 'virginica' )
library( devtools )
devtools::document()
library(camrprojects)
devtools::document()
library(camrprojects)
source('D:/CAM_postdoc/R_packages/camrprojects/R/S01-create_folder_pathways.R', echo=TRUE)
setwd("D:/CAM_postdoc/2020/Gitlab_projects/MMJ/R")
dir()
folder_pathways = create_folder_pathways()
source('D:/CAM_postdoc/R_packages/camrprojects/R/S01-create_folder_pathways.R', echo=TRUE)
dir()
folder_pathways = create_folder_pathways()
source('D:/CAM_postdoc/R_packages/camrprojects/R/S01-create_folder_pathways.R', echo=TRUE)
dir()
folder_pathways = create_folder_pathways()
folder_pathways
devtools::document()
library(camrprojects)
devtools::document()
library(camrprojects)
devtools::document()
library(camrprojects)
devtools::document()
library(camrprojects)
devtools::document()
library(camrprojects)
ref
variables
reference
rep( 1:2, each = 4 )
rep( 1:2, each = 2 )
df <- data.frame( ID = rep( 1:2, each = 4 ) )
df$Session <- rep( rep( 1:2, each = 2 ), 2 )
df$Var_1 <- NA; df$Var_1[ df$Session == 1 ]
df <- data.frame( ID = rep( 1:2, each = 4 ) )
df$Session <- rep( rep( 1:2, each = 2 ), 2 )
df$Var_1 <- NA; df$Var_1[ df$Session == 1 ] = c( 1, 1, 2, NA )
df$Var_1 <- NA; df$Var_1[ df$Session == 2 ] = c( 3, NA, 4, 4 )
df
rep( c( LETTERS[1:3], '' ), 2 )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S12-extract_unique_value.R')
extract_unique_value <- function( x,
variable_names,
entries,
default = "",
missing = c( "" ),
reference = NULL,
check_for_multiple = TRUE ) {
# Number of variables/columns to loop over
K <- length( variable_names )
# Initialize output
output <- default
current_value <- default
# Specify reference variable if there are issues
# (i.e., subject identifier)
if ( is.null( reference ) ) {
reference = names( x )[1]
}
# Loop over variables
for ( k in 1:K ) {
# Check for missing data over range of entries for subject
no_missing <-
entries &
!is.na( x[[ variable_names[k] ]] ) &
!x[[ variable_names[k] ]] %in% missing
# If entry provided, set output to unique value
if ( any( no_missing ) ) {
current_value <- unique( x[[ variable_names[k] ]][ no_missing ] )
# If specified, check if multiple values are found
# and return a warning
if ( check_for_multiple ) {
# Print a warning if multiple values are detected
if ( length( current_value ) > 1 ) {
warning_message <- paste0(
'Multiple values detected:\n',
'Variable = ', variable_names[k], '\n',
'Reference = ', unique( dat[[ reference ]][entries] )[1], '\n',
'Values = ', paste( current_value, collapse = ', ' ), '\n'
)
warning( warning_message, call. = FALSE )
}
}
# Take the first unique value
current_value <- current_value[1]
# Once a unique value is found, stop looping over
# remaining variables
break()
}
}
# Update output
output <- current_value
# Return output
return( output )
}
df <- data.frame( ID = rep( 1:2, each = 4 ) )
df$Session <- rep( rep( 1:2, each = 2 ), 2 )
df$Var_1 <- NA; df$Var_1[ df$Session == 1 ] = c( 1, 1, 2, NA )
df$Var_1 <- NA; df$Var_1[ df$Session == 2 ] = c( 3, NA, 4, 4 )
df$Var_2 <- rep( c( LETTERS[1:3], '' ), 2 )
for ( id in 1:2 ) {
entries <- df$ID == id
print( extract_unique_value( df, 'Var_1', entries ) )
}
for ( id in 1:2 ) {
entries <- df$ID == id
print( paste0( id, ': ', extract_unique_value( df, 'Var_1', entries ) ) )
}
sapply( 1:2, function( id ) extract_unique_value( df, 'Var_1', df$ID == id ) )
df <- data.frame( ID = rep( 1:2, each = 4 ) )
df$Session <- rep( rep( 1:2, each = 2 ), 2 )
df$Var_1 <- NA; df$Var_1[ df$Session == 1 ] = c( 1, 1, 2, NA )
df$Var_1 <- NA; df$Var_1[ df$Session == 2 ] = c( 3, NA, 4, 4 )
df$Var_2 <- rep( c( LETTERS[1:3], '' ), 2 )
for ( id in 1:2 ) {
entries <- df$ID == id
print( paste0( id, ': ', extract_unique_value( df, 'Var_1', entries ) ) )
}
for ( id in 1:2 ) {
for ( sess in 1:2 ) {
entries <- df$ID == id & df$Session == sess
tag <- paste0( id, ': , session: ', sess )
print( paste0( tag, extract_unique_value( df, 'Var_2', entries ) ) )
}
}
sapply( 1:2, function( id ) extract_unique_value( df, 'Var_1', df$ID == id ) )
source('D:/CAM_postdoc/R_packages/camrprojects/R/S12-extract_unique_value.R')
extract_unique_value <- function( x,
variable_names,
entries,
default = "",
missing = c( "" ),
reference = NULL,
check_for_multiple = TRUE ) {
# Number of variables/columns to loop over
K <- length( variable_names )
# Initialize output
output <- default
current_value <- default
# Specify reference variable if there are issues
# (i.e., subject identifier)
if ( is.null( reference ) ) {
reference = names( x )[1]
}
# Loop over variables
for ( k in 1:K ) {
# Check for missing data over range of entries for subject
no_missing <-
entries &
!is.na( x[[ variable_names[k] ]] ) &
!x[[ variable_names[k] ]] %in% missing
# If entry provided, set output to unique value
if ( any( no_missing ) ) {
current_value <- unique( x[[ variable_names[k] ]][ no_missing ] )
# If specified, check if multiple values are found
# and return a warning
if ( check_for_multiple ) {
# Print a warning if multiple values are detected
if ( length( current_value ) > 1 ) {
warning_message <- paste0(
'Multiple values detected:\n',
'Variable = ', variable_names[k], '\n',
'Reference = ', unique( x[[ reference ]][entries] )[1], '\n',
'Values = ', paste( current_value, collapse = ', ' ), '\n'
)
warning( warning_message, call. = FALSE )
}
}
# Take the first unique value
current_value <- current_value[1]
# Once a unique value is found, stop looping over
# remaining variables
break()
}
}
# Update output
output <- current_value
# Return output
return( output )
}
source('D:/CAM_postdoc/R_packages/camrprojects/R/S12-extract_unique_value.R')
source('D:/CAM_postdoc/R_packages/camrprojects/R/S12-extract_unique_value.R')
source('D:/CAM_postdoc/R_packages/camrprojects/R/S12-extract_unique_value.R')
source('D:/CAM_postdoc/R_packages/camrprojects/R/S12-extract_unique_value.R')
df <- data.frame( ID = rep( 1:2, each = 4 ) )
df$Session <- rep( rep( 1:2, each = 2 ), 2 )
df$Var_1 <- NA; df$Var_1[ df$Session == 1 ] = c( 1, 1, 2, NA )
df$Var_1 <- NA; df$Var_1[ df$Session == 2 ] = c( 3, NA, 4, 4 )
df$Var_2 <- c( LETTERS[1:3], '', LETTERS[1], '', '', '' )
for ( id in 1:2 ) {
entries <- df$ID == id
print( paste0( id, ': ', extract_unique_value( df, 'Var_1', entries ) ) )
}
for ( id in 1:2 ) {
for ( sess in 1:2 ) {
entries <- df$ID == id & df$Session == sess
tag <- paste0( id, ': , session: ', sess )
print( paste0( tag, extract_unique_value( df, 'Var_2', entries ) ) )
}
}
df <- data.frame( ID = rep( 1:2, each = 4 ) )
df$Session <- rep( rep( 1:2, each = 2 ), 2 )
df$Var_1 <- NA; df$Var_1[ df$Session == 1 ] = c( 1, 1, 2, NA )
df$Var_1 <- NA; df$Var_1[ df$Session == 2 ] = c( 3, NA, 4, 4 )
df$Var_2 <- c( LETTERS[1:3], '', LETTERS[1], '', '', '' )
for ( id in 1:2 ) {
entries <- df$ID == id
print( paste0( id, ': ', extract_unique_value( df, 'Var_1', entries ) ) )
}
for ( id in 1:2 ) {
for ( sess in 1:2 ) {
entries <- df$ID == id & df$Session == sess
tag <- paste0( id, ': , session: ', sess, ' = ' )
print( paste0( tag, extract_unique_value( df, 'Var_2', entries ) ) )
}
}
df <- data.frame( ID = rep( 1:2, each = 4 ) )
df$Session <- rep( rep( 1:2, each = 2 ), 2 )
df$Var_1 <- NA; df$Var_1[ df$Session == 1 ] = c( 1, 1, 2, NA )
df$Var_1 <- NA; df$Var_1[ df$Session == 2 ] = c( 3, NA, 4, 4 )
df$Var_2 <- c( LETTERS[1:3], '', LETTERS[1], '', '', '' )
for ( id in 1:2 ) {
entries <- df$ID == id
print( paste0( id, ': ', extract_unique_value( df, 'Var_1', entries ) ) )
}
for ( id in 1:2 ) {
for ( sess in 1:2 ) {
entries <- df$ID == id & df$Session == sess
tag <- paste0( 'ID: ', id, ', session: ', sess, ' = ' )
print( paste0( tag, extract_unique_value( df, 'Var_2', entries ) ) )
}
}
df
?sapply
cars
?cars
irs
iris
df <- data.frame( ID = rep( 1:2, each = 4 ) )
df$Session <- rep( rep( 1:2, each = 2 ), 2 )
df$Post <- rep( c( FALSE, TRUE ), 4 )
df
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- sapply( c( 'Canis familiaris', 'Felis catus', 'Felis catus' ),
function(x) c( x, rep( '', 2 ) ) )
df <- data.frame( ID = rep( 1:3, each = 3 ) )
sapply( c( 'Canis familiaris', 'Felis catus', 'Felis catus' ),
function(x) c( x, rep( '', 2 ) ) )
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df$Age_session_1 <- NA; df$Age_session_1[1] = 4
df$Age_session_2 <- NA; df$Age_session_2[c(4,7)] = c(2,5)
df
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df$Age_session_1 <- NA; df$Age_session_1[1] = 4
df$Age_session_2 <- NA; df$Age_session_2[c(4,7)] = c(2,5)
for ( id in 1:3 ) {
val <- extract_unique_value(
df,
c( 'Age_session_1', 'Age_session_2' )
)
print( paste0( 'ID: ', id, '; Age = ', val ) )
}
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df$Age_session_1 <- NA; df$Age_session_1[1] = 4
df$Age_session_2 <- NA; df$Age_session_2[c(4,7)] = c(2,5)
for ( id in 1:3 ) {
val <- extract_unique_value(
x = df,
variable_names = c( 'Age_session_1', 'Age_session_2' ),
entries = df$ID == id
)
print( paste0( 'ID: ', id, '; Age = ', val ) )
}
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df$Age_session_1 <- NA; df$Age_session_1[1] = 4
df$Age_session_2 <- NA; df$Age_session_2[c(4)] = 2
#
for ( id in 1:3 ) {
val <- extract_unique_value(
x = df,
variable_names = c( 'Age_session_1', 'Age_session_2' ),
entries = df$ID == id,
default = 'Missing'
)
print( paste0( 'ID: ', id, '; Age = ', val ) )
}
?dat.frame
?data.frame
sapply( 1:3, function( id ) {
val <- extract_unique_value(
x = df,
variable_names = 'Status',
entries = df$ID == id,
missing = c( 'No entry', 'N/A' )
)
print( paste0( 'ID: ', id, '; Status = ', val ) )
} )
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df$Age_session_1 <- NA; df$Age_session_1[1] = 4
df$Age_session_2 <- NA; df$Age_session_2[c(4)] = 2
df$Status <- c( 'No entry', 'Good', 'Poor',
'No entry', 'N/A', 'Good',
'No entry', 'Poor', 'N/A' )
sapply( 1:3, function( id ) {
val <- extract_unique_value(
x = df,
variable_names = 'Status',
entries = df$ID == id,
missing = c( 'No entry', 'N/A' )
)
print( paste0( 'ID: ', id, '; Status = ', val ) )
} )
sapply( 1:3, function( id ) {
val <- extract_unique_value(
x = df,
variable_names = 'Status',
entries = df$ID == id,
missing = c( 'No entry', 'N/A' )
)
cat( paste0( 'ID: ', id, '; Status = ', val ), '\n' )
} )
res <- sapply( 1:3, function( id ) {
val <- extract_unique_value(
x = df,
variable_names = 'Status',
entries = df$ID == id,
missing = c( 'No entry', 'N/A' )
)
paste0( 'ID: ', id, '; Status = ', val )
} )
print( res )
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df$Age_session_1 <- NA; df$Age_session_1[1] = 4
df$Age_session_2 <- NA; df$Age_session_2[c(4)] = 2
df$Status <- c( 'No entry', 'Good', 'Poor',
'No entry', 'N/A', 'Good',
'No entry', 'Poor', 'N/A' )
# Extract unique value for age for two different
# variables per levels of 'ID', with user-defined
# value for missing cases
for ( id in 1:3 ) {
val <- extract_unique_value(
x = df,
variable_names = c( 'Age_session_1', 'Age_session_2' ),
entries = df$ID == id,
default = 'Missing'
)
print( paste0( 'ID: ', id, '; Age = ', val ) )
}
res <- sapply( 1:3, function( id ) {
val <- extract_unique_value(
x = df,
variable_names = 'Status',
entries = df$ID == id,
missing = c( 'No entry', 'N/A' )
)
paste0( 'ID: ', id, '; Status = ', val, '\n' )
} )
cat( res )
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df$Age_session_1 <- NA; df$Age_session_1[1] = 4
df$Age_session_2 <- NA; df$Age_session_2[c(4)] = 2
df$Status <- c( 'No entry', 'Good', 'Poor',
'No entry', 'N/A', 'Good',
'No entry', 'Poor', 'N/A' )
# Extract unique value for age for two different
# variables per levels of 'ID', with user-defined
# value for missing cases
for ( id in 1:3 ) {
val <- extract_unique_value(
x = df,
variable_names = c( 'Age_session_1', 'Age_session_2' ),
entries = df$ID == id,
default = 'Missing'
)
print( paste0( 'ID: ', id, '; Age = ', val ) )
}
res <- sapply( 1:3, function( id ) {
val <- extract_unique_value(
x = df,
variable_names = 'Status',
entries = df$ID == id,
missing = c( 'No entry', 'N/A' )
)
paste0( 'ID: ', id, '; Status = ', val, '\n' )
} )
cat( res )
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df$Age_session_1 <- NA; df$Age_session_1[1] = 4
df$Age_session_2 <- NA; df$Age_session_2[c(4)] = 2
df$Status <- c( 'No entry', 'Good', 'Poor',
'No entry', 'N/A', 'Good',
'No entry', 'Poor', 'N/A' )
# Extract unique value for age for two different
# variables per levels of 'ID', with user-defined
# value for missing cases
for ( id in 1:3 ) {
val <- extract_unique_value(
x = df,
variable_names = c( 'Age_session_1', 'Age_session_2' ),
entries = df$ID == id,
default = 'Missing'
)
cat( paste0( 'ID: ', id, '; Age = ', val, '\n' ) )
}
res <- sapply( 1:3, function( id ) {
val <- extract_unique_value(
x = df,
variable_names = 'Status',
entries = df$ID == id,
missing = c( 'No entry', 'N/A' )
)
paste0( 'ID: ', id, '; Status = ', val, '\n' )
} )
cat( res )
df <- data.frame( ID = rep( 1:3, each = 3 ) )
df$Species <- c( 'Canis familiaris', '', '',
'Felis catus', '', '',
'Felis catus', '', '' )
df$Age_session_1 <- NA; df$Age_session_1[1] = 4
df$Age_session_2 <- NA; df$Age_session_2[c(4)] = 2
df$Status <- c( 'No entry', 'Good', 'Poor',
'No entry', 'N/A', 'Good',
'No entry', 'Poor', 'N/A' )
# Extract unique value for age for two different
# variables per levels of 'ID', with user-defined
# value for missing cases
for ( id in 1:3 ) {
val <- extract_unique_value(
x = df,
variable_names = c( 'Age_session_1', 'Age_session_2' ),
entries = df$ID == id,
default = 'Missing'
)
cat( paste0( 'ID: ', id, '; Age = ', val, '\n' ) )
}
res <- sapply( 1:3, function( id ) {
val <- extract_unique_value(
x = df,
variable_names = 'Status',
entries = df$ID == id,
missing = c( 'No entry', 'N/A' ),
reference = 'ID'
)
paste0( 'ID: ', id, '; Status = ', val, '\n' )
} )
cat( res )
devtools::document()
library(camrprojects)
devtools::document()
library(camrprojects)
devtools::document()
library(camrprojects)
library( camrprojects )
?write.csv
?get
devtools::document()
library(camrprojects)
