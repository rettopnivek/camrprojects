% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/R00-Utilities_and_operators.R
\name{camr_assert}
\alias{camr_assert}
\title{Pipe-friendly assertions}
\usage{
camr_assert(any_x, lgl_expr, chr_message)
}
\arguments{
\item{any_x}{An object, preferably a dataframe, to pass through.}

\item{lgl_expr}{A logical expression to evaluate within any_x.}

\item{chr_message}{A message to be displayed by stop() if lgl_expr is false.}
}
\value{
any_x
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
The purpose of this function is to enable pipeable assertions on dataframe
columns without the need to break the pipe-chain or to use inline functions.

For example...
\verb{df_data |> (function (df) \{if (!all(str_detect(df$x, '^a'))) stop('Elements of col x must start with "a".'); df\})() |> ...}

Can be written more readably...
\verb{df_data |> camr_assert(all(str_detect(x, '^a')), 'Elements of col x must start with "a".') |> ...}

If the assertion passes, the object being tested will be passed through unchanged.
}
\examples{
iris |>
  camr_assert(
    any(Species =='versicolor'),
    'Dataset contains no irises of species versicolor'
  ) |>
  summarize(
   m_length = mean(Petal.Length)
  )
}
\keyword{internal}
